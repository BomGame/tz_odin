{"version":3,"sources":["assets\\Scripts\\Diamond.js"],"names":["cc","Class","Component","properties","destroy","boolean","onBeginContact","contact","selfCollider","otherCollider","node","name","flag","results","director","getPhysicsManager","rayCast","v2","x","y","RayCastType","All","length","runAction","moveTo","left","right","collider","color","console","log","onEndContact","start","update","dt","_active","_val"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        destroy: boolean=true,\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onBeginContact: function (contact, selfCollider, otherCollider) {\r\n        //диагональное падение\r\n        if(selfCollider.node.name==otherCollider.node.name)\r\n        {\r\n            var flag=true;\r\n            var results=cc.director.getPhysicsManager().rayCast(cc.v2(selfCollider.node.x, selfCollider.node.y),cc.v2(selfCollider.node.x-75, selfCollider.node.y-75),cc.RayCastType.All);\r\n            if(results.length==0)\r\n            {\r\n                if(selfCollider.node.x==otherCollider.node.x && selfCollider.node.y>otherCollider.node.y)\r\n                {\r\n                    var x = selfCollider.node.x-75.0;\r\n                    var y = selfCollider.node.y-75.0;\r\n                    this.node.runAction(cc.moveTo(0,x,y));\r\n                    flag=false;\r\n                    \r\n                }\r\n            }\r\n\r\n            var results=cc.director.getPhysicsManager().rayCast(cc.v2(selfCollider.node.x, selfCollider.node.y),cc.v2(selfCollider.node.x+75, selfCollider.node.y-75),cc.RayCastType.All);\r\n            if(results.length==0)\r\n            {\r\n                if(flag&&selfCollider.node.x==otherCollider.node.x && selfCollider.node.y>otherCollider.node.y)\r\n                {\r\n                    var x = selfCollider.node.x+75.0;\r\n                    var y = selfCollider.node.y-75.0;\r\n                    this.node.runAction(cc.moveTo(0,x,y));\r\n                    \r\n                }\r\n            }\r\n        }\r\n\r\n        //убирание рядов\r\n        var left=cc.director.getPhysicsManager().rayCast(cc.v2(selfCollider.node.x, selfCollider.node.y), cc.v2(selfCollider.node.x-75, selfCollider.node.y),cc.RayCastType.All);\r\n        var right=cc.director.getPhysicsManager().rayCast(cc.v2(selfCollider.node.x, selfCollider.node.y), cc.v2(selfCollider.node.x+75, selfCollider.node.y),cc.RayCastType.All);\r\n        if(left.length==1&&right.length==1)\r\n        {\r\n            //console.log(\"ttt\");\r\n            if(left[0].collider.node.color==right[0].collider.node.color&&right[0].collider.node.color==selfCollider.node.color)\r\n            {\r\n                console.log(\"test\");\r\n            }\r\n        }\r\n        //console.log(left[0].collider.node.color);\r\n        //console.log(selfCollider.node.color);\r\n\r\n        //var world=selfCollider.node.world;\r\n        //console.log(world);\r\n        //console.log(\"valid \"+cc.isValid(selfCollider));\r\n    },\r\n\r\n    onEndContact (contact, selfCollider, otherCollider)\r\n    {\r\n    },\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n        destroy=true;\r\n    },\r\n\r\n    update (dt) {\r\n        if(destroy)\r\n        {\r\n            var left=cc.director.getPhysicsManager().rayCast(cc.v2(this.node.x, this.node.y), cc.v2(this.node.x-75, this.node.y),cc.RayCastType.All);\r\n            var right=cc.director.getPhysicsManager().rayCast(cc.v2(this.node.x, this.node.y), cc.v2(this.node.x+75, this.node.y),cc.RayCastType.All);\r\n            if(left.length==1&&right.length==1&&this.node._active)\r\n            {\r\n                if(left[0].collider.node.color._val==right[0].collider.node.color._val&&right[0].collider.node.color._val==this.node.color._val&&left[0].collider.node.name==right[0].collider.node.name&&right[0].collider.node.name==this.node.name)\r\n                {\r\n                    this.node.runAction(cc.moveTo(0,900,0));\r\n                    left[0].collider.node.runAction(cc.moveTo(0,900,0));;\r\n                    right[0].collider.node.runAction(cc.moveTo(0,900,0));;\r\n                \r\n                    destroy=false;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if(!destroy)\r\n        {\r\n            return;\r\n        }\r\n    },\r\n});\r\n"]}