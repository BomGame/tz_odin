
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Scripts/SpawnScript.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2fca2I4fTFBNpG9os7aFiI3', 'SpawnScript');
// Scripts/SpawnScript.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    diamond: {
      "default": null,
      type: cc.Prefab
    },
    isSpawn: boolean = true
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    cc.director.getCollisionManager().enabled = true;
    isSpawn = true;
  },
  onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
    isSpawn = false; //otherCollider.body.linearVelocity=cc.v2(0,-30);
  },
  onEndContact: function onEndContact(contact, selfCollider, otherCollider) {
    var results = cc.director.getPhysicsManager().rayCast(cc.v2(selfCollider.node.x, selfCollider.node.y - 40), cc.v2(selfCollider.node.x, selfCollider.node.y + 40), cc.RayCastType.All);

    if (results.length == 1) {
      var scene = cc.director.getScene();
      var Diamond = cc.instantiate(this.diamond);
      Diamond.parent = scene;
      Diamond.setPosition(selfCollider.node.x, selfCollider.node.y);
      Diamond.name = 'diam';
      var color = Math.floor(Math.random() * 5);

      switch (color) {
        case 0:
          Diamond.color = cc.Color.CYAN;
          break;

        case 1:
          Diamond.color = cc.Color.RED;
          break;

        case 2:
          Diamond.color = cc.Color.ORANGE;
          break;

        case 3:
          Diamond.color = cc.Color.GREEN;
          break;

        case 4:
          Diamond.color = cc.Color.WHITE;
          break;
      }
    }
  },
  start: function start() {},
  update: function update(dt) {
    if (isSpawn) {
      var scene = cc.director.getScene();
      var Diamond = cc.instantiate(this.diamond);
      Diamond.parent = scene;
      var node = this.node;
      Diamond.setPosition(node.x, node.y);
      Diamond.name = 'diam';
      var color = Math.floor(Math.random() * 5);

      switch (color) {
        case 0:
          Diamond.color = cc.Color.CYAN;
          break;

        case 1:
          Diamond.color = cc.Color.RED;
          break;

        case 2:
          Diamond.color = cc.Color.ORANGE;
          break;

        case 3:
          Diamond.color = cc.Color.GREEN;
          break;

        case 4:
          Diamond.color = cc.Color.WHITE;
          break;
      }
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0c1xcU3Bhd25TY3JpcHQuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJkaWFtb25kIiwidHlwZSIsIlByZWZhYiIsImlzU3Bhd24iLCJib29sZWFuIiwib25Mb2FkIiwiZGlyZWN0b3IiLCJnZXRDb2xsaXNpb25NYW5hZ2VyIiwiZW5hYmxlZCIsIm9uQmVnaW5Db250YWN0IiwiY29udGFjdCIsInNlbGZDb2xsaWRlciIsIm90aGVyQ29sbGlkZXIiLCJvbkVuZENvbnRhY3QiLCJyZXN1bHRzIiwiZ2V0UGh5c2ljc01hbmFnZXIiLCJyYXlDYXN0IiwidjIiLCJub2RlIiwieCIsInkiLCJSYXlDYXN0VHlwZSIsIkFsbCIsImxlbmd0aCIsInNjZW5lIiwiZ2V0U2NlbmUiLCJEaWFtb25kIiwiaW5zdGFudGlhdGUiLCJwYXJlbnQiLCJzZXRQb3NpdGlvbiIsIm5hbWUiLCJjb2xvciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIkNvbG9yIiwiQ1lBTiIsIlJFRCIsIk9SQU5HRSIsIkdSRUVOIiwiV0hJVEUiLCJzdGFydCIsInVwZGF0ZSIsImR0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsT0FBTyxFQUFFO0FBQ0wsaUJBQVMsSUFESjtBQUVMQyxNQUFBQSxJQUFJLEVBQUVMLEVBQUUsQ0FBQ007QUFGSixLQUREO0FBS1JDLElBQUFBLE9BQU8sRUFBRUMsT0FBTyxHQUFHO0FBTFgsR0FIUDtBQVlMO0FBRUFDLEVBQUFBLE1BZEssb0JBY0s7QUFDTlQsSUFBQUEsRUFBRSxDQUFDVSxRQUFILENBQVlDLG1CQUFaLEdBQWtDQyxPQUFsQyxHQUE0QyxJQUE1QztBQUNBTCxJQUFBQSxPQUFPLEdBQUMsSUFBUjtBQUNILEdBakJJ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UixHQUFhLE1BQWI7QUFDQSxVQUFJQyxLQUFLLEdBQUNDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBYyxDQUF6QixDQUFWOztBQUNBLGNBQU9ILEtBQVA7QUFFSSxhQUFLLENBQUw7QUFDSUwsVUFBQUEsT0FBTyxDQUFDSyxLQUFSLEdBQWNuQyxFQUFFLENBQUN1QyxLQUFILENBQVNDLElBQXZCO0FBQ0E7O0FBQ0osYUFBSyxDQUFMO0FBQ0lWLFVBQUFBLE9BQU8sQ0FBQ0ssS0FBUixHQUFjbkMsRUFBRSxDQUFDdUMsS0FBSCxDQUFTRSxHQUF2QjtBQUNBOztBQUNKLGFBQUssQ0FBTDtBQUNJWCxVQUFBQSxPQUFPLENBQUNLLEtBQVIsR0FBY25DLEVBQUUsQ0FBQ3VDLEtBQUgsQ0FBU0csTUFBdkI7QUFDQTs7QUFDSixhQUFLLENBQUw7QUFDSVosVUFBQUEsT0FBTyxDQUFDSyxLQUFSLEdBQWNuQyxFQUFFLENBQUN1QyxLQUFILENBQVNJLEtBQXZCO0FBQ0E7O0FBQ0osYUFBSyxDQUFMO0FBQ0liLFVBQUFBLE9BQU8sQ0FBQ0ssS0FBUixHQUFjbkMsRUFBRSxDQUFDdUMsS0FBSCxDQUFTSyxLQUF2QjtBQUNBO0FBaEJSO0FBa0JIO0FBQ0o7QUF4RkksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBkaWFtb25kOiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXHJcbiAgICAgICAgICAgIHR5cGU6IGNjLlByZWZhYixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgaXNTcGF3bjogYm9vbGVhbiA9IHRydWUsXHJcblxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XHJcblxyXG4gICAgb25Mb2FkICgpIHtcclxuICAgICAgICBjYy5kaXJlY3Rvci5nZXRDb2xsaXNpb25NYW5hZ2VyKCkuZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgaXNTcGF3bj10cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkJlZ2luQ29udGFjdDogZnVuY3Rpb24gKGNvbnRhY3QsIHNlbGZDb2xsaWRlciwgb3RoZXJDb2xsaWRlcikge1xyXG4gICAgICAgIGlzU3Bhd249ZmFsc2U7XHJcbiAgICAgICAgLy9vdGhlckNvbGxpZGVyLmJvZHkubGluZWFyVmVsb2NpdHk9Y2MudjIoMCwtMzApO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkVuZENvbnRhY3QgKGNvbnRhY3QsIHNlbGZDb2xsaWRlciwgb3RoZXJDb2xsaWRlcilcclxuICAgIHtcclxuICAgICAgICB2YXIgcmVzdWx0cz1jYy5kaXJlY3Rvci5nZXRQaHlzaWNzTWFuYWdlcigpLnJheUNhc3QoXHJcbiAgICAgICAgICAgIGNjLnYyKHNlbGZDb2xsaWRlci5ub2RlLngsIHNlbGZDb2xsaWRlci5ub2RlLnktNDApLGNjLnYyKHNlbGZDb2xsaWRlci5ub2RlLngsIHNlbGZDb2xsaWRlci5ub2RlLnkrNDApLGNjLlJheUNhc3RUeXBlLkFsbCk7XHJcbiAgICAgICAgaWYocmVzdWx0cy5sZW5ndGg9PTEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgc2NlbmUgPSBjYy5kaXJlY3Rvci5nZXRTY2VuZSgpO1xyXG4gICAgICAgICAgICB2YXIgRGlhbW9uZCA9IGNjLmluc3RhbnRpYXRlKHRoaXMuZGlhbW9uZCk7XHJcbiAgICAgICAgICAgIERpYW1vbmQucGFyZW50ID0gc2NlbmU7XHJcbiAgICAgICAgICAgIERpYW1vbmQuc2V0UG9zaXRpb24oc2VsZkNvbGxpZGVyLm5vZGUueCwgc2VsZkNvbGxpZGVyLm5vZGUueSk7XHJcbiAgICAgICAgICAgIERpYW1vbmQubmFtZT0nZGlhbSc7XHJcbiAgICAgICAgICAgIHZhciBjb2xvcj1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqNSk7XHJcbiAgICAgICAgICAgIHN3aXRjaChjb2xvcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIERpYW1vbmQuY29sb3I9Y2MuQ29sb3IuQ1lBTjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBEaWFtb25kLmNvbG9yPWNjLkNvbG9yLlJFRDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBEaWFtb25kLmNvbG9yPWNjLkNvbG9yLk9SQU5HRTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBEaWFtb25kLmNvbG9yPWNjLkNvbG9yLkdSRUVOO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIERpYW1vbmQuY29sb3I9Y2MuQ29sb3IuV0hJVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHN0YXJ0ICgpIHsgfSxcclxuXHJcbiAgICB1cGRhdGUgKGR0KSB7XHJcbiAgICAgICAgaWYoaXNTcGF3bilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBzY2VuZSA9IGNjLmRpcmVjdG9yLmdldFNjZW5lKCk7XHJcbiAgICAgICAgICAgIHZhciBEaWFtb25kID0gY2MuaW5zdGFudGlhdGUodGhpcy5kaWFtb25kKTtcclxuICAgICAgICAgICAgRGlhbW9uZC5wYXJlbnQgPSBzY2VuZTtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGU7XHJcbiAgICAgICAgICAgIERpYW1vbmQuc2V0UG9zaXRpb24obm9kZS54LCBub2RlLnkpO1xyXG4gICAgICAgICAgICBEaWFtb25kLm5hbWU9J2RpYW0nO1xyXG4gICAgICAgICAgICB2YXIgY29sb3I9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjUpO1xyXG4gICAgICAgICAgICBzd2l0Y2goY29sb3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBEaWFtb25kLmNvbG9yPWNjLkNvbG9yLkNZQU47XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgRGlhbW9uZC5jb2xvcj1jYy5Db2xvci5SRUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgRGlhbW9uZC5jb2xvcj1jYy5Db2xvci5PUkFOR0U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgRGlhbW9uZC5jb2xvcj1jYy5Db2xvci5HUkVFTjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBEaWFtb25kLmNvbG9yPWNjLkNvbG9yLldISVRFO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==